import Geometric2 from './Geometric2'

describe("Geometric2", function() {
  describe("()", function() {
    const zero: Geometric2 = new Geometric2()
    it("should be the value 0", function() {
      expect(zero.α).toBe(0)
      expect(zero.x).toBe(0)
      expect(zero.y).toBe(0)
      expect(zero.β).toBe(0)
    })
  })
  describe("static one()", function() {
    const one: Geometric2 = Geometric2.one()
    it("should be the scalar 1", function() {
      expect(one.α).toBe(1)
      expect(one.x).toBe(0)
      expect(one.y).toBe(0)
      expect(one.β).toBe(0)
    })
  })
  describe("div", function() {
    it("1 / 1 should be 1", function() {
      const x: Geometric2 = Geometric2.one()
      const ans = x.clone().div(x)
      expect(ans.α).toBe(1)
      expect(ans.x).toBe(0)
      expect(ans.y).toBe(0)
      expect(ans.β).toBe(0)
    })
    it("e1 / e1 should be 1", function() {
      const x: Geometric2 = Geometric2.e1()
      const ans = x.clone().div(x)
      expect(ans.α).toBe(1)
      expect(ans.x).toBe(0)
      expect(ans.y).toBe(0)
      expect(ans.β).toBe(0)
    })
    it("e1 / e2 should be I", function() {
      const ans: Geometric2 = Geometric2.e1().clone().div(Geometric2.e2())
      expect(ans.α).toBe(0)
      expect(ans.x).toBe(0)
      expect(ans.y).toBe(0)
      expect(ans.β).toBe(1)
    })
    it("e2 / e2 should be 1", function() {
      const x: Geometric2 = Geometric2.e2()
      const ans = x.clone().div(x)
      expect(ans.α).toBe(1)
      expect(ans.x).toBe(0)
      expect(ans.y).toBe(0)
      expect(ans.β).toBe(0)
    })
    it("I / I should be 1", function() {
      const I: Geometric2 = Geometric2.e1().clone().mul(Geometric2.e2())
      const ans = I.clone().div(I)
      expect(ans.α).toBe(1)
      expect(ans.x).toBe(0)
      expect(ans.y).toBe(0)
      expect(ans.β).toBe(0)
    })
  })
  describe("inv", function() {
    it("(1) should be 1", function() {
      const one: Geometric2 = Geometric2.one()
      const inv = one.clone().inv()
      expect(inv.α).toBe(1)
      expect(inv.x).toBe(0)
      expect(inv.y).toBe(0)
      expect(inv.β).toBe(0)
    })
    it("(2) should be 0.5", function() {
      const one: Geometric2 = Geometric2.scalar(2)
      const inv = one.clone().inv()
      expect(inv.α).toBe(0.5)
      expect(inv.x).toBe(0)
      expect(inv.y).toBe(0)
      expect(inv.β).toBe(0)
    })
    it("(e1) should be e1", function() {
      const e1: Geometric2 = Geometric2.e1()
      const inv = e1.clone().inv()
      expect(inv.α).toBe(0)
      expect(inv.x).toBe(1)
      expect(inv.y).toBe(0)
      expect(inv.β).toBe(0)
    })
    it("(2 * e1) should be 0.5 * e1", function() {
      const e1: Geometric2 = Geometric2.e1()
      const inv = e1.clone().scale(2).inv()
      expect(inv.α).toBe(0)
      expect(inv.x).toBe(0.5)
      expect(inv.y).toBe(0)
      expect(inv.β).toBe(0)
    })
    it("(e2) should be e2", function() {
      const e2: Geometric2 = Geometric2.e2()
      const inv = e2.clone().inv()
      expect(inv.α).toBe(0)
      expect(inv.x).toBe(0)
      expect(inv.y).toBe(1)
      expect(inv.β).toBe(0)
    })
    it("(2 * e2) should be 0.5 * e2", function() {
      const e2: Geometric2 = Geometric2.e2()
      const inv = e2.clone().scale(2).inv()
      expect(inv.α).toBe(0)
      expect(inv.x).toBe(0)
      expect(inv.y).toBe(0.5)
      expect(inv.β).toBe(0)
    })
    it("(I) should be -I", function() {
      const e1: Geometric2 = Geometric2.e1()
      const e2: Geometric2 = Geometric2.e2()
      const I = e1.clone().mul(e2)
      const inv = I.clone().inv()
      expect(inv.α).toBe(0)
      expect(inv.x).toBe(0)
      expect(inv.y).toBe(0)
      expect(inv.β).toBe(-1)
    })
    it("(2 * I) should be -0.5 * I", function() {
      const e1: Geometric2 = Geometric2.e1()
      const e2: Geometric2 = Geometric2.e2()
      const I = e1.clone().mul(e2)
      const inv = I.clone().scale(2).inv()
      expect(inv.α).toBe(0)
      expect(inv.x).toBe(0)
      expect(inv.y).toBe(0)
      expect(inv.β).toBe(-0.5)
    })
  })
})
