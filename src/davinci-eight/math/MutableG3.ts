import Euclidean3 = require('../math/Euclidean3')
import GeometricE3 = require('../math/GeometricE3')
import LinearElement = require('../math/LinearElement')
import mustBeNumber = require('../checks/mustBeNumber')
import mustBeObject = require('../checks/mustBeObject')
import PseudoscalarEe = require('../math/PseudoscalarE3')
import SpinorE3 = require('../math/SpinorE3')
import VectorE3 = require('../math/VectorE3')
import VectorN = require('../math/VectorN')

// Symbolic constants for the coordinate indices into the data array.
let COORD_W = 0
let COORD_X = 1
let COORD_Y = 2
let COORD_Z = 3
let COORD_YZ = 4
let COORD_ZX = 5
let COORD_XY = 6
let COORD_XYZ = 7

/**
 * @class MutableG3
 * @extends GeometricE3
 * @beta
 */
class MutableG3 extends VectorN<number> implements GeometricE3, LinearElement<GeometricE3, MutableG3, SpinorE3, VectorE3> {
    /**
     * Constructs a <code>MutableG3</code> from Cartesian coordinates.
     * The coordinates are provided as an array of 8 <code>number</code>s.
     * The corresponding basis is generated by the standard linear space basis, {<b>e</b><sub>1</sub>, <b>e</b><sub>2</sub>, <b>e</b><sub>3</sub>}.
     * The geometric space basis, ordered to correspond with the coordinates, is
     * [1, <b>e</b><sub>1</sub>, <b>e</b><sub>2</sub>, <b>e</b><sub>3</sub>, <b>e</b><sub>2</sub><b>e</b><sub>3</sub>, <b>e</b><sub>3</sub><b>e</b><sub>1</sub>, <b>e</b><sub>1</sub><b>e</b><sub>2</sub>, <b>e</b><sub>1</sub><b>e</b><sub>2</sub><b>e</b><sub>3</sub>].
     * @class MutableG3
     * @beta
     * @constructor
     * @param data [number[] = [0, 0, 0, 0, 0, 0, 0, 0]] The Cartesian coordinates of the multivector.
     */
    constructor(data: number[] = [0, 0, 0, 0, 0, 0, 0, 0]) {
        super(data, false, 8)
    }
    /**
     * The coordinate corresponding to the unit standard basis scalar.
     * @property w
     * @type {number}
     */
    get w(): number {
        return this.data[COORD_W]
    }
    set w(w: number) {
        mustBeNumber('w', w)
        this.modified = this.modified || this.data[COORD_W] !== w
        this.data[COORD_W] = w
    }
    /**
     * The coordinate corresponding to the <b>e</b><sub>1</sub> standard basis vector.
     * @property x
     * @type {number}
     */
    get x(): number {
        return this.data[COORD_X]
    }
    set x(x: number) {
        mustBeNumber('x', x)
        this.modified = this.modified || this.data[COORD_X] !== x
        this.data[COORD_X] = x
    }
    /**
     * The coordinate corresponding to the <b>e</b><sub>2</sub> standard basis vector.
     * @property y
     * @type {number}
     */
    get y(): number {
        return this.data[COORD_Y]
    }
    set y(y: number) {
        mustBeNumber('y', y)
        this.modified = this.modified || this.data[COORD_Y] !== y
        this.data[COORD_Y] = y
    }
    /**
     * The coordinate corresponding to the <b>e</b><sub>3</sub> standard basis vector.
     * @property z
     * @type {number}
     */
    get z(): number {
        return this.data[COORD_Z]
    }
    set z(z: number) {
        mustBeNumber('z', z)
        this.modified = this.modified || this.data[COORD_Z] !== z
        this.data[COORD_Z] = z
    }
    /**
     * The coordinate corresponding to the <b>e</b><sub>2</sub><b>e</b><sub>3</sub> standard basis bivector.
     * @property yz
     * @type {number}
     */
    get yz(): number {
        return this.data[COORD_YZ]
    }
    set yz(yz: number) {
        mustBeNumber('yz', yz)
        this.modified = this.modified || this.data[COORD_YZ] !== yz
        this.data[COORD_YZ] = yz
    }
    /**
     * The coordinate corresponding to the <b>e</b><sub>3</sub><b>e</b><sub>1</sub> standard basis bivector.
     * @property zx
     * @type {number}
     */
    get zx(): number {
        return this.data[COORD_ZX]
    }
    set zx(zx: number) {
        mustBeNumber('zx', zx)
        this.modified = this.modified || this.data[COORD_ZX] !== zx
        this.data[COORD_ZX] = zx
    }
    /**
     * The coordinate corresponding to the <b>e</b><sub>1</sub><b>e</b><sub>2</sub> standard basis bivector.
     * @property xy
     * @type {number}
     */
    get xy(): number {
        return this.data[COORD_XY]
    }
    set xy(xy: number) {
        mustBeNumber('xy', xy)
        this.modified = this.modified || this.data[COORD_XY] !== xy
        this.data[COORD_XY] = xy
    }
    /**
     * The coordinate corresponding to the I<sub>3</sub> <code>=</code> <b>e</b><sub>1</sub><b>e</b><sub>2</sub><b>e</b><sub>2</sub> standard basis pseudoscalar.
     * @property xyz
     * @type {number}
     */
    get xyz(): number {
        return this.data[COORD_XYZ]
    }
    set xyz(xyz: number) {
        mustBeNumber('xyz', xyz)
        this.modified = this.modified || this.data[COORD_XYZ] !== xyz
        this.data[COORD_XYZ] = xyz
    }
    /**
     * <p>
     * <code>this ⟼ this + M * α</code>
     * </p>
     * @method add
     * @param M {GeometricE3}
     * @param α [number = 1]
     * @return {MutableG3} <code>this</code>
     * @chainable
     */
    add(M: GeometricE3, α: number = 1): MutableG3 {
        mustBeObject('M', M)
        mustBeNumber('α', α)
        this.w += M.w * α
        this.x += M.x * α
        this.y += M.y * α
        this.z += M.z * α
        this.yz += M.yz * α
        this.zx += M.zx * α
        this.xy += M.xy * α
        this.xyz += M.xyz * α
        return this
    }
    /**
     * <p>
     * <code>this ⟼ a + b</code>
     * </p>
     * @method add2
     * @param a {GeometricE3}
     * @param b {GeometricE3}
     * @return {MutableG3} <code>this</code>
     * @chainable
     */
    add2(a: GeometricE3, b: GeometricE3): MutableG3 {
        mustBeObject('a', a)
        mustBeObject('b', b)
        this.w = a.w + b.w
        this.x = a.x + b.x
        this.y = a.y + b.y
        this.z = a.z + b.z
        this.yz = a.yz + b.yz
        this.zx = a.zx + b.zx
        this.xy = a.xy + b.xy
        this.xyz = a.xyz + b.xyz
        return this
    }
    /**
     * @method clone
     * @return {MutableG3} <code>copy(this)</code>
     */
    clone(): MutableG3 {
        return new MutableG3([this.w, this.x, this.y, this.z, this.yz, this.zx, this.xy, this.xyz]);
    }
    /**
     * <p>
     * <code>this ⟼ copy(v)</code>
     * </p>
     * @method copy
     * @param M {VectorE3}
     * @return {MutableG3} <code>this</code>
     * @chainable
     */
    copy(M: GeometricE3): MutableG3 {
        mustBeObject('M', M)
        this.w = M.w
        this.x = M.x
        this.y = M.y
        this.z = M.z
        this.yz = M.yz
        this.zx = M.zx
        this.xy = M.xy
        this.xyz = M.xyz
        return this
    }
    /**
     * <p>
     * <code>this ⟼ this / α</code>
     * </p>
     * @method divideByScalar
     * @param α {number}
     * @return {MutableG3} <code>this</code>
     * @chainable
     */
    divideByScalar(α: number): MutableG3 {
        mustBeNumber('α', α)
        this.w /= α
        this.x /= α
        this.y /= α
        this.z /= α
        this.yz /= α
        this.zx /= α
        this.xy /= α
        this.xyz /= α
        return this
    }
    /**
     * <p>
     * <code>this ⟼ this + α * (target - this)</code>
     * </p>
     * @method lerp
     * @param target {GeometricE3}
     * @param α {number}
     * @return {MutableG3} <code>this</code>
     * @chainable
     */
    lerp(target: GeometricE3, α: number): MutableG3 {
        mustBeObject('target', target)
        mustBeNumber('α', α)
        this.w += (target.w - this.w) * α;
        this.x += (target.x - this.x) * α;
        this.y += (target.y - this.y) * α;
        this.z += (target.z - this.z) * α;
        this.yz += (target.yz - this.yz) * α;
        this.zx += (target.zx - this.zx) * α;
        this.xy += (target.xy - this.xy) * α;
        this.xyz += (target.xyz - this.xyz) * α;
        return this;
    }
    /**
     * <p>
     * <code>this ⟼ a + α * (b - a)</code>
     * </p>
     * @method lerp2
     * @param a {GeometricE3}
     * @param b {GeometricE3}
     * @param α {number}
     * @return {MutableG3} <code>this</code>
     * @chainable
     */
    lerp2(a: GeometricE3, b: GeometricE3, α: number): MutableG3 {
        mustBeObject('a', a)
        mustBeObject('b', b)
        mustBeNumber('α', α)
        this.copy(a).lerp(b, α)
        return this
    }
    /**
     * <p>
     * <code>this ⟼ this * α</code>
     * </p>
     * @method scale
     * @param α {number} 
     */
    scale(α: number): MutableG3 {
        mustBeNumber('α', α)
        this.w *= α
        this.x *= α
        this.y *= α
        this.z *= α
        this.yz *= α
        this.zx *= α
        this.xy *= α
        this.xyz *= α
        return this
    }
    /**
     * <p>
     * <code>this ⟼ - n * this * n</code>
     * </p>
     * @method reflect
     * @param n {VectorE3}
     * @return {MutableG3} <code>this</code>
     * @chainable
     */
    reflect(n: VectorE3): MutableG3 {
        // FIXME: This inly reflects the vector components.
        mustBeObject('n', n);
        let x = this.x;
        let y = this.y;
        let z = this.z;
        let nx = n.x;
        let ny = n.y;
        let nz = n.z;
        let dot2 = (x * nx + y * ny + z * nz) * 2;
        this.x = x - dot2 * nx;
        this.y = y - dot2 * ny;
        this.z = z - dot2 * nz;
        return this;
    }
    /**
     * <p>
     * <code>this ⟼ R * this * reverse(R)</code>
     * </p>
     * @method rotate
     * @param R {SpinorE3}
     * @return {MutableG3} <code>this</code>
     * @chainable
     */
    rotate(R: SpinorE3): MutableG3 {
        mustBeObject('R', R);
        // FIXME: This only rotates the vector components.
        let x = this.x;
        let y = this.y;
        let z = this.z;

        let a = R.xy;
        let b = R.yz;
        let c = R.zx;
        let w = R.w;

        let ix = w * x - c * z + a * y;
        let iy = w * y - a * x + b * z;
        let iz = w * z - b * y + c * x;
        let iw = b * x + c * y + a * z;

        this.x = ix * w + iw * b + iy * a - iz * c;
        this.y = iy * w + iw * c + iz * b - ix * a;
        this.z = iz * w + iw * a + ix * c - iy * b;

        return this;
    }
    /**
     * <p>
     * <code>this ⟼ this - M * α</code>
     * </p>
     * @method sub
     * @param M {GeometricE3}
     * @param α [number = 1]
     * @return {MutableG3} <code>this</code>
     * @chainable
     */
    sub(M: GeometricE3, α: number = 1): MutableG3 {
        mustBeObject('M', M)
        mustBeNumber('α', α)
        this.w -= M.w * α
        this.x -= M.x * α
        this.y -= M.y * α
        this.z -= M.z * α
        this.yz -= M.yz * α
        this.zx -= M.zx * α
        this.xy -= M.xy * α
        this.xyz -= M.xyz * α
        return this
    }
    /**
     * <p>
     * <code>this ⟼ a - b</code>
     * </p>
     * @method sub2
     * @param a {GeometricE3}
     * @param b {GeometricE3}
     * @return {MutableG3} <code>this</code>
     * @chainable
     */
    sub2(a: GeometricE3, b: GeometricE3): MutableG3 {
        mustBeObject('a', a)
        mustBeObject('b', b)
        this.w = a.w - b.w
        this.x = a.x - b.x
        this.y = a.y - b.y
        this.z = a.z - b.z
        this.yz = a.yz - b.yz
        this.zx = a.zx - b.zx
        this.xy = a.xy - b.xy
        this.xyz = a.xyz - b.xyz
        return this
    }
}

export = MutableG3