import Slide = require('davinci-eight/slideshow/Slide');
import Director = require('davinci-eight/slideshow/Director');
import DirectorKeyboardHandler = require('davinci-eight/slideshow/DirectorKeyboardHandler');
import WaitAnimation = require('davinci-eight/slideshow/animations/WaitAnimation');
import ColorAnimation = require('davinci-eight/slideshow/animations/ColorAnimation');
import Vector2Animation = require('davinci-eight/slideshow/animations/Vector2Animation');
import Vector3Animation = require('davinci-eight/slideshow/animations/Vector3Animation');
import Spinor2Animation = require('davinci-eight/slideshow/animations/Spinor2Animation');
import Spinor3Animation = require('davinci-eight/slideshow/animations/Spinor3Animation');
import Frustum = require('davinci-eight/cameras/Frustum');
import Perspective = require('davinci-eight/cameras/Perspective');
import View = require('davinci-eight/cameras/View');
import PerspectiveCamera = require('davinci-eight/cameras/PerspectiveCamera');
import BlendFactor = require('davinci-eight/commands/BlendFactor');
import WebGLBlendFunc = require('davinci-eight/commands/WebGLBlendFunc');
import WebGLClearColor = require('davinci-eight/commands/WebGLClearColor');
import Capability = require('davinci-eight/commands/Capability');
import WebGLDisable = require('davinci-eight/commands/WebGLDisable');
import WebGLEnable = require('davinci-eight/commands/WebGLEnable');
import AttribLocation = require('davinci-eight/core/AttribLocation');
import AttribMetaInfo = require('davinci-eight/core/AttribMetaInfo');
import Color = require('davinci-eight/core/Color');
import DrawMode = require('davinci-eight/core/DrawMode');
import ContextKahuna = require('davinci-eight/core/ContextKahuna');
import IContextMonitor = require('davinci-eight/core/IContextMonitor');
import GraphicsProgramSymbols = require('davinci-eight/core/GraphicsProgramSymbols');
import UniformLocation = require('davinci-eight/core/UniformLocation');
import UniformMetaInfo = require('davinci-eight/core/UniformMetaInfo');
import Curve = require('davinci-eight/curves/Curve');
import Keyboard = require('davinci-eight/devices/Keyboard');
import DrawAttribute = require('davinci-eight/geometries/DrawAttribute');
import DrawPrimitive = require('davinci-eight/geometries/DrawPrimitive');
import Simplex = require('davinci-eight/geometries/Simplex');
import Vertex = require('davinci-eight/geometries/Vertex');
import GeometryMeta = require('davinci-eight/geometries/GeometryMeta');
import Topology = require('davinci-eight/topologies/Topology');
import PointTopology = require('davinci-eight/topologies/PointTopology');
import LineTopology = require('davinci-eight/topologies/LineTopology');
import MeshTopology = require('davinci-eight/topologies/MeshTopology');
import GridTopology = require('davinci-eight/topologies/GridTopology');
import IDrawList = require('davinci-eight/scene/IDrawList');
import Drawable = require('davinci-eight/scene/Drawable');
import Scene = require('davinci-eight/scene/Scene');
import GraphicsContext = require('davinci-eight/scene/GraphicsContext');
import AxialSimplexGeometry = require('davinci-eight/geometries/AxialSimplexGeometry');
import ArrowGeometry = require('davinci-eight/geometries/ArrowGeometry');
import BarnSimplexGeometry = require('davinci-eight/geometries/BarnSimplexGeometry');
import ConeGeometry = require('davinci-eight/geometries/ConeGeometry');
import ConeSimplexGeometry = require('davinci-eight/geometries/ConeSimplexGeometry');
import CuboidGeometry = require('davinci-eight/geometries/CuboidGeometry');
import CuboidSimplexGeometry = require('davinci-eight/geometries/CuboidSimplexGeometry');
import CylinderGeometry = require('davinci-eight/geometries/CylinderGeometry');
import CylinderSimplexGeometry = require('davinci-eight/geometries/CylinderSimplexGeometry');
import DodecahedronSimplexGeometry = require('davinci-eight/geometries/DodecahedronSimplexGeometry');
import IcosahedronSimplexGeometry = require('davinci-eight/geometries/IcosahedronSimplexGeometry');
import KleinBottleSimplexGeometry = require('davinci-eight/geometries/KleinBottleSimplexGeometry');
import Simplex1Geometry = require('davinci-eight/geometries/Simplex1Geometry');
import MobiusStripSimplexGeometry = require('davinci-eight/geometries/MobiusStripSimplexGeometry');
import OctahedronSimplexGeometry = require('davinci-eight/geometries/OctahedronSimplexGeometry');
import SliceSimplexGeometry = require('davinci-eight/geometries/SliceSimplexGeometry');
import GridSimplexGeometry = require('davinci-eight/geometries/GridSimplexGeometry');
import PolyhedronSimplexGeometry = require('davinci-eight/geometries/PolyhedronSimplexGeometry');
import RevolutionSimplexGeometry = require('davinci-eight/geometries/RevolutionSimplexGeometry');
import RingGeometry = require('davinci-eight/geometries/RingGeometry');
import RingSimplexGeometry = require('davinci-eight/geometries/RingSimplexGeometry');
import SphericalPolarSimplexGeometry = require('davinci-eight/geometries/SphericalPolarSimplexGeometry');
import TetrahedronSimplexGeometry = require('davinci-eight/geometries/TetrahedronSimplexGeometry');
import VortexSimplexGeometry = require('davinci-eight/geometries/VortexSimplexGeometry');
import GraphicsProgram = require('davinci-eight/materials/GraphicsProgram');
import HTMLScriptsGraphicsProgram = require('davinci-eight/materials/HTMLScriptsGraphicsProgram');
import LineMaterial = require('davinci-eight/materials/LineMaterial');
import MeshMaterial = require('davinci-eight/materials/MeshMaterial');
import MeshLambertMaterial = require('davinci-eight/materials/MeshLambertMaterial');
import PointMaterial = require('davinci-eight/materials/PointMaterial');
import GraphicsProgramBuilder = require('davinci-eight/materials/GraphicsProgramBuilder');
import VectorE3 = require('davinci-eight/math/VectorE3');
import Dimensions = require('davinci-eight/math/Dimensions');
import Euclidean2 = require('davinci-eight/math/Euclidean2');
import Euclidean3 = require('davinci-eight/math/Euclidean3');
import R1 = require('davinci-eight/math/R1');
import Mat2R = require('davinci-eight/math/Mat2R');
import Mat3R = require('davinci-eight/math/Mat3R');
import Mat4R = require('davinci-eight/math/Mat4R');
import QQ = require('davinci-eight/math/QQ');
import Unit = require('davinci-eight/math/Unit');
import G2 = require('davinci-eight/math/G2');
import G3 = require('davinci-eight/math/G3');
import SpinG2 = require('davinci-eight/math/SpinG2');
import SpinG3 = require('davinci-eight/math/SpinG3');
import R2 = require('davinci-eight/math/R2');
import R3 = require('davinci-eight/math/R3');
import R4 = require('davinci-eight/math/R4');
import VectorN = require('davinci-eight/math/VectorN');
import AmbientLight = require('davinci-eight/facets/AmbientLight');
import ColorFacet = require('davinci-eight/facets/ColorFacet');
import DirectionalLightE3 = require('davinci-eight/facets/DirectionalLightE3');
import EulerFacet = require('davinci-eight/facets/EulerFacet');
import ModelFacetE3 = require('davinci-eight/facets/ModelFacetE3');
import PointSizeFacet = require('davinci-eight/facets/PointSizeFacet');
import ReflectionFacetE2 = require('davinci-eight/facets/ReflectionFacetE2');
import ReflectionFacetE3 = require('davinci-eight/facets/ReflectionFacetE3');
import Vector3Facet = require('davinci-eight/facets/Vector3Facet');
import ModelE2 = require('davinci-eight/models/ModelE2');
import ModelE3 = require('davinci-eight/models/ModelE3');
import IGraphicsProgram = require('davinci-eight/core/IGraphicsProgram');
import IContextRenderer = require('davinci-eight/renderers/IContextRenderer');
import IUnknownArray = require('davinci-eight/collections/IUnknownArray');
import NumberIUnknownMap = require('davinci-eight/collections/NumberIUnknownMap');
import Shareable = require('davinci-eight/utils/Shareable');
import StringIUnknownMap = require('davinci-eight/collections/StringIUnknownMap');
import WindowAnimationRunner = require('davinci-eight/utils/WindowAnimationRunner');
/**
 * @module EIGHT
 */
declare var eight: {
    LAST_MODIFIED: string;
    strict: boolean;
    VERSION: string;
    Slide: typeof Slide;
    Director: typeof Director;
    DirectorKeyboardHandler: typeof DirectorKeyboardHandler;
    ColorAnimation: typeof ColorAnimation;
    WaitAnimation: typeof WaitAnimation;
    Vector2Animation: typeof Vector2Animation;
    Vector3Animation: typeof Vector3Animation;
    Spinor2Animation: typeof Spinor2Animation;
    Spinor3Animation: typeof Spinor3Animation;
    Keyboard: typeof Keyboard;
    HTMLScriptsGraphicsProgram: typeof HTMLScriptsGraphicsProgram;
    GraphicsProgram: typeof GraphicsProgram;
    LineMaterial: typeof LineMaterial;
    MeshMaterial: typeof MeshMaterial;
    MeshLambertMaterial: typeof MeshLambertMaterial;
    PointMaterial: typeof PointMaterial;
    GraphicsProgramBuilder: typeof GraphicsProgramBuilder;
    BlendFactor: typeof BlendFactor;
    Capability: typeof Capability;
    WebGLBlendFunc: typeof WebGLBlendFunc;
    WebGLClearColor: typeof WebGLClearColor;
    WebGLDisable: typeof WebGLDisable;
    WebGLEnable: typeof WebGLEnable;
    initWebGL: (canvas: HTMLCanvasElement, attributes?: WebGLContextAttributes) => WebGLRenderingContext;
    createFrustum: (viewMatrixName: string, projectionMatrixName: string) => Frustum;
    createPerspective: (options?: {
        fov?: number;
        aspect?: number;
        near?: number;
        far?: number;
        projectionMatrixName?: string;
        viewMatrixName?: string;
    }) => Perspective;
    createView: (options?: {
        viewMatrixName?: string;
    }) => View;
    ModelE2: typeof ModelE2;
    ModelE3: typeof ModelE3;
    EulerFacet: typeof EulerFacet;
    ModelFacetE3: typeof ModelFacetE3;
    Simplex: typeof Simplex;
    Vertex: typeof Vertex;
    frustumMatrix: (left: number, right: number, bottom: number, top: number, near: number, far: number, matrix?: Float32Array) => Float32Array;
    perspectiveMatrix: (fov: number, aspect: number, near: number, far: number, matrix?: Mat4R) => Mat4R;
    viewMatrix: (eye: VectorE3, look: VectorE3, up: VectorE3, matrix?: Mat4R) => Mat4R;
    Scene: typeof Scene;
    Drawable: typeof Drawable;
    PerspectiveCamera: typeof PerspectiveCamera;
    getCanvasElementById: (elementId: string, dom?: Document) => HTMLCanvasElement;
    GraphicsContext: typeof GraphicsContext;
    createDrawList: () => IDrawList;
    renderer: () => IContextRenderer;
    webgl: (attributes?: WebGLContextAttributes) => ContextKahuna;
    animation: (animate: (time: number) => void, options?: {
        setUp?: () => void;
        tearDown?: (animateException: any) => void;
        terminate?: (time: number) => boolean;
        window?: Window;
    }) => WindowAnimationRunner;
    DrawMode: typeof DrawMode;
    AttribLocation: typeof AttribLocation;
    UniformLocation: typeof UniformLocation;
    createGraphicsProgram: (monitors: IContextMonitor[], vertexShader: string, fragmentShader: string, attribs: string[]) => IGraphicsProgram;
    smartProgram: (monitors: IContextMonitor[], attributes: {
        [name: string]: AttribMetaInfo;
    }, uniformsList: {
        [name: string]: UniformMetaInfo;
    }[], bindings: string[]) => IGraphicsProgram;
    Color: typeof Color;
    AxialSimplexGeometry: typeof AxialSimplexGeometry;
    ArrowGeometry: typeof ArrowGeometry;
    BarnSimplexGeometry: typeof BarnSimplexGeometry;
    ConeGeometry: typeof ConeGeometry;
    ConeSimplexGeometry: typeof ConeSimplexGeometry;
    CuboidGeometry: typeof CuboidGeometry;
    CuboidSimplexGeometry: typeof CuboidSimplexGeometry;
    CylinderGeometry: typeof CylinderGeometry;
    CylinderSimplexGeometry: typeof CylinderSimplexGeometry;
    DodecahedronSimplexGeometry: typeof DodecahedronSimplexGeometry;
    IcosahedronSimplexGeometry: typeof IcosahedronSimplexGeometry;
    KleinBottleSimplexGeometry: typeof KleinBottleSimplexGeometry;
    Simplex1Geometry: typeof Simplex1Geometry;
    MobiusStripSimplexGeometry: typeof MobiusStripSimplexGeometry;
    OctahedronSimplexGeometry: typeof OctahedronSimplexGeometry;
    GridSimplexGeometry: typeof GridSimplexGeometry;
    PolyhedronSimplexGeometry: typeof PolyhedronSimplexGeometry;
    RevolutionSimplexGeometry: typeof RevolutionSimplexGeometry;
    RingGeometry: typeof RingGeometry;
    RingSimplexGeometry: typeof RingSimplexGeometry;
    SliceSimplexGeometry: typeof SliceSimplexGeometry;
    SphericalPolarSimplexGeometry: typeof SphericalPolarSimplexGeometry;
    TetrahedronSimplexGeometry: typeof TetrahedronSimplexGeometry;
    VortexSimplexGeometry: typeof VortexSimplexGeometry;
    Topology: typeof Topology;
    PointTopology: typeof PointTopology;
    LineTopology: typeof LineTopology;
    MeshTopology: typeof MeshTopology;
    GridTopology: typeof GridTopology;
    Dimensions: typeof Dimensions;
    Unit: typeof Unit;
    Euclidean2: typeof Euclidean2;
    Euclidean3: typeof Euclidean3;
    Mat2R: typeof Mat2R;
    Mat3R: typeof Mat3R;
    Mat4R: typeof Mat4R;
    QQ: typeof QQ;
    G2: typeof G2;
    G3: typeof G3;
    R1: typeof R1;
    SpinG2: typeof SpinG2;
    SpinG3: typeof SpinG3;
    R2: typeof R2;
    R3: typeof R3;
    R4: typeof R4;
    VectorN: typeof VectorN;
    Curve: typeof Curve;
    simplicesToGeometryMeta: (geometry: Simplex[]) => GeometryMeta;
    computeFaceNormals: (simplex: Simplex, positionName?: string, normalName?: string) => void;
    cube: (size?: number) => Simplex[];
    quadrilateral: (a: VectorN<number>, b: VectorN<number>, c: VectorN<number>, d: VectorN<number>, attributes?: {
        [name: string]: VectorN<number>[];
    }, triangles?: Simplex[]) => Simplex[];
    square: (size?: number) => Simplex[];
    tetrahedron: (a: VectorN<number>, b: VectorN<number>, c: VectorN<number>, d: VectorN<number>, attributes?: {
        [name: string]: VectorN<number>[];
    }, triangles?: Simplex[]) => Simplex[];
    triangle: (a: VectorN<number>, b: VectorN<number>, c: VectorN<number>, attributes?: {
        [name: string]: VectorN<number>[];
    }, triangles?: Simplex[]) => Simplex[];
    simplicesToDrawPrimitive: (simplices: Simplex[], geometryMeta?: GeometryMeta) => DrawPrimitive;
    GraphicsProgramSymbols: typeof GraphicsProgramSymbols;
    programFromScripts: (monitors: IContextMonitor[], vsId: string, fsId: string, domDocument: Document, attribs?: string[]) => IGraphicsProgram;
    DrawAttribute: typeof DrawAttribute;
    DrawPrimitive: typeof DrawPrimitive;
    AmbientLight: typeof AmbientLight;
    ColorFacet: typeof ColorFacet;
    DirectionalLightE3: typeof DirectionalLightE3;
    PointSizeFacet: typeof PointSizeFacet;
    ReflectionFacetE2: typeof ReflectionFacetE2;
    ReflectionFacetE3: typeof ReflectionFacetE3;
    Vector3Facet: typeof Vector3Facet;
    IUnknownArray: typeof IUnknownArray;
    NumberIUnknownMap: typeof NumberIUnknownMap;
    refChange: (uuid: string, name?: string, change?: number) => number;
    Shareable: typeof Shareable;
    StringIUnknownMap: typeof StringIUnknownMap;
    cos: <T>(x: T) => T;
    cosh: <T>(x: T) => T;
    exp: <T>(x: T) => T;
    log: <T>(x: T) => T;
    norm: <T>(x: T) => T;
    quad: <T>(x: T) => T;
    sin: <T>(x: T) => T;
    sinh: <T>(x: T) => T;
    sqrt: <T>(x: T) => T;
};
export = eight;
