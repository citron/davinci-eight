import ContextController = require('../core/ContextController');
import ContextManager = require('../core/ContextManager');
import ContextMonitor = require('../core/ContextMonitor');
import ContextListener = require('../core/ContextListener');
import ContextRenderer = require('../renderers/ContextRenderer');
import GeometryData = require('../dfx/GeometryData');
import IBuffer = require('../core/IBuffer');
import IContextCommand = require('../core/IContextCommand');
import IDrawList = require('../scene/IDrawList');
import IBufferGeometry = require('../dfx/IBufferGeometry');
import ITexture2D = require('../core/ITexture2D');
import Shareable = require('../utils/Shareable');
import UniformData = require('../core/UniformData');
declare class WebGLRenderer extends Shareable implements ContextController, ContextMonitor, ContextRenderer {
    private _canvas;
    private _canvasId;
    private _kahuna;
    private _renderer;
    constructor(canvas?: HTMLCanvasElement, canvasId?: number, attributes?: WebGLContextAttributes);
    destructor(): void;
    addContextListener(user: ContextListener): void;
    canvasId: number;
    canvas: HTMLCanvasElement;
    contextFree(canvasId: number): void;
    contextGain(manager: ContextManager): void;
    contextLoss(canvasId: number): void;
    createArrayBuffer(): IBuffer;
    createBufferGeometry(elements: GeometryData, mode?: number, usage?: number): IBufferGeometry;
    createTexture2D(): ITexture2D;
    gl: WebGLRenderingContext;
    prolog(): void;
    pushProlog(command: IContextCommand): void;
    pushStartUp(command: IContextCommand): void;
    removeContextListener(user: ContextListener): void;
    render(drawList: IDrawList, ambients: UniformData): void;
    start(): void;
    stop(): void;
}
export = WebGLRenderer;
