declare class Vector2 {
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    set(x: number, y: number): Vector2;
    setX(x: number): Vector2;
    setY(y: number): Vector2;
    setComponent(index: number, value: number): void;
    getComponent(index: number): number;
    copy(v: Vector2): Vector2;
    add(v: Vector2): Vector2;
    addScalar(s: number): Vector2;
    addVectors(a: Vector2, b: Vector2): Vector2;
    sub(v: Vector2): Vector2;
    subScalar(s: number): Vector2;
    subVectors(a: Vector2, b: Vector2): Vector2;
    multiply(v: Vector2): Vector2;
    multiplyScalar(s: number): Vector2;
    divide(v: Vector2): Vector2;
    divideScalar(scalar: number): Vector2;
    min(v: Vector2): Vector2;
    max(v: Vector2): Vector2;
    floor(): Vector2;
    ceil(): Vector2;
    round(): Vector2;
    roundToZero(): Vector2;
    negate(): Vector2;
    dot(v: Vector2): number;
    lengthSq(): number;
    length(): number;
    normalize(): Vector2;
    distanceTo(v: Vector2): number;
    distanceToSquared(v: Vector2): number;
    setLength(l: number): Vector2;
    lerp(v: Vector2, alpha: number): Vector2;
    lerpVectors(v1: Vector2, v2: Vector2, alpha: number): Vector2;
    equals(v: Vector2): boolean;
    fromArray(array: number[], offset: number): Vector2;
    toArray(array: number[], offset: number): number[];
    fromAttribute(attribute: {
        itemSize: number;
        array: number[];
    }, index: number, offset: number): Vector2;
    clone(): Vector2;
}
export = Vector2;
